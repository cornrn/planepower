/* Auto-generated by genmsg_cpp for file /home/kurt/planepower/components/lowlevel/soem/soem_ebox/msg/EBOXDigital.msg */
#ifndef SOEM_EBOX_MESSAGE_EBOXDIGITAL_H
#define SOEM_EBOX_MESSAGE_EBOXDIGITAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
//#include "ros/serialization.h"
//#include "ros/builtin_message_traits.h"
//#include "ros/message_operations.h"
//#include "ros/time.h"

//#include "ros/macros.h"

//#include "ros/assert.h"


namespace soem_ebox
{
template <class ContainerAllocator>
struct EBOXDigital_ {
  typedef EBOXDigital_<ContainerAllocator> Type;

  EBOXDigital_()
  : digital()
  {
    digital.assign(false);
  }

  EBOXDigital_(const ContainerAllocator& _alloc)
  : digital()
  {
    digital.assign(false);
  }

  typedef boost::array<uint8_t, 8>  _digital_type;
  boost::array<uint8_t, 8>  digital;


  typedef boost::shared_ptr< ::soem_ebox::EBOXDigital_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soem_ebox::EBOXDigital_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EBOXDigital
typedef  ::soem_ebox::EBOXDigital_<std::allocator<void> > EBOXDigital;

typedef boost::shared_ptr< ::soem_ebox::EBOXDigital> EBOXDigitalPtr;
typedef boost::shared_ptr< ::soem_ebox::EBOXDigital const> EBOXDigitalConstPtr;


} // namespace soem_ebox


#endif // SOEM_EBOX_MESSAGE_EBOXDIGITAL_H

