/// Base class
#include "TelemetryBase.hpp"
/// Custom data type used by OROCOS
#include "types/DynamicMpcDataTypes.hpp"
/// Protobuf header, autogenerated
#include "autogenerated/DynamicMpcTelemetry.pb.h"
/// ACADO generated file
#include "autogenerated/acado_common.h"

using namespace DynamicMpcProto;

class DynamicMpcTelemetry
	: public TelemetryBase<DynamicMpcHorizon, DynamicMpcProto::DynamicMpcMsg>
{
	typedef TelemetryBase<DynamicMpcHorizon, DynamicMpcProto::DynamicMpcMsg> Base;

public:
	DynamicMpcTelemetry(std::string name)
		: Base( name )
	{
		for (unsigned el = 0; el < ACADO_NX; ++el)
		{
			msg.add_x();
			DynamicMpcMsg::Horizon* tmp = msg.mutable_x( el );
			for (unsigned h = 0; h < (ACADO_N + 1); ++h)
				tmp->add_h( 0 );
		}

		for (unsigned el = 0; el < ACADO_NXA; ++el)
		{
			msg.add_z();
			DynamicMpcMsg::Horizon* tmp = msg.mutable_z( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				tmp->add_h( 0 );
		}

		for (unsigned el = 0; el < ACADO_NU; ++el)
		{
			msg.add_u();
			DynamicMpcMsg::Horizon* tmp = msg.mutable_u( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				tmp->add_h( 0 );
		}

		for (unsigned el = 0; el < ACADO_NY; ++el)
		{
			msg.add_y();
			DynamicMpcMsg::Horizon* tmp = msg.mutable_y( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				tmp->add_h( 0 );
		}

		for (unsigned el = 0; el < ACADO_NYN; ++el)
		{
			msg.add_yn( 0 );
		}
	}

	~DynamicMpcTelemetry()
	{}

protected:

	virtual void fill();

};

using namespace RTT;

void DynamicMpcTelemetry::fill()
{
	unsigned el = 0;

	if (data.x.size() == (ACADO_N + 1) * ACADO_NX)
		for (el = 0; el < ACADO_NX; ++el)
		{
			DynamicMpcMsg::Horizon* hor = msg.mutable_x( el );
			for (unsigned h = 0; h < (ACADO_N + 1); ++h)
				hor->set_h(h, data.x[h * ACADO_NX + el]);
		}

	if (data.u.size() == ACADO_N * ACADO_NU)
		for (el = 0; el < ACADO_NU; ++el)
		{
			DynamicMpcMsg::Horizon* hor = msg.mutable_u( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				hor->set_h(h, data.u[h * ACADO_NU + el]);
		}

	if (data.z.size() == ACADO_N * ACADO_NXA)
		for (el = 0; el < ACADO_NXA; ++el)
		{
			DynamicMpcMsg::Horizon* hor = msg.mutable_z( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				hor->set_h(h, data.z[h * ACADO_NXA + el]);
		}

	if (data.y.size() == ACADO_N * ACADO_NY)
		for (el = 0; el < ACADO_NY; ++el)
		{
			DynamicMpcMsg::Horizon* hor = msg.mutable_y( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				hor->set_h(h, data.y[h * ACADO_NY + el]);
		}


	if (data.yN.size() == ACADO_NYN)
		for (el = 0; el < ACADO_NYN; ++el)
			msg.set_yn(el, data.yN[ el ]);

	msg.set_solver_status( data.solver_status );
	msg.set_kkt_value( data.kkt_value );
	msg.set_obj_value( data.obj_value );
	msg.set_n_asc( data.n_asc );

	msg.set_exec_fdb( data.exec_fdb );
	msg.set_exec_prep( data.exec_prep );

	msg.set_ts_trigger( (double)((uint64_t)data.ts_trigger - startTime) * 1e-9);
	msg.set_ts_elapsed( data.ts_elapsed );
}

ORO_CREATE_COMPONENT_LIBRARY()
ORO_LIST_COMPONENT_TYPE( DynamicMpcTelemetry )
