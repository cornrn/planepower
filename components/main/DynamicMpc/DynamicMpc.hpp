// Description: NMPC based on dynamic (DAE) kite model
// Author:      Milan Vukov, milan.vukov@esat.kuleuven.be
// Date:        August 2013.

#ifndef DYNAMIC_MPC_HPP
#define DYNAMIC_MPC_HPP

#include <rtt/TaskContext.hpp>
#include <rtt/Port.hpp>

/// Common header for the autogenerated code
#include "autogenerated/acado_common.h"

//
// Define some common stuff
//
#define NX		ACADO_NX	// # differential variables
#define NXA		ACADO_NXA	// # algebraic variables
#define NU		ACADO_NU	// # control variables
#define NP		ACADO_NP	// # user parameters
#define NY		ACADO_NY	// # measurements, nodes 0.. N - 1
#define NYN		ACADO_NYN	// # measurements, last node
#define N 		ACADO_N		// # estimation intervals

typedef uint64_t TIME_TYPE;

// Include MHE data types
#include "DynamicMhe/types/DynamicMheDataTypes.hpp"

//#include "types/DynamicMpcDataTypes.hpp"

class DynamicMpc
	: public RTT::TaskContext
{
public:
	/// Ctor
	DynamicMpc(std::string name);
	/// Dtor
	virtual ~DynamicMpc()
	{}
	
	/// Configuration hook.
	virtual bool configureHook( );
	/// Start hook.
	virtual bool startHook( );
	/// Update hook.
	virtual void updateHook( );
	/// Stop hook.
	virtual void stopHook( );
	/// Cleanup hook.
	virtual void cleanupHook( );
	/// Error hook.
	virtual void errorHook( );

protected:

	//
	// Input ports
	//

	/// Current state estimate
	RTT::InputPort< DynamicMheStateEstimate > portFeedback;
	/// State estimate data holder
	DynamicMheStateEstimate feedback;

	//
	// Output ports
	//
	
	/// Output port with control signals
	RTT::InputPort< std::vector< double > > portControls;
	/// control data holder
	std::vector< double > controls;
	
	//
	// Properties
	//

	/// # SQP iterations
	unsigned numSqpIterations;

private:

	/// Indicator whether the MPC is ready for outputting the data
//	bool initialized;

// 	//
// 	// Input ports and their associated variables
// 	//

// 	/// Estimates ready trigger
// 	InputPort< bool > portFeedbackReady;
// 	bool feedbackReady;

// 	/// Port state estimate
// 	InputPort< vector< double > > portFeedback;
// 	vector< double > feedback;
// 	FlowStatus statusPortFeedback;

// 	/// Port for references
// 	InputPort< vector< double > > portReferences;
// 	vector< double > references;
// 	FlowStatus statusPortReferences;

// 	/// Terminal cost weighting matrix
// 	InputPort< vector< double > > portWeightingMatrixP;
// 	vector< double > weightingMatrixP;
// 	FlowStatus statusPortWeightingMatrixP;

// 	InputPort< vector< double > > portControlInput;
// 	vector< double > controlInput;
// 	FlowStatus statusPortControlInput;

// 	//
// 	// Output ports and their associated variables
// 	//

// 	/// Controls
// 	// Signals: [ur1, ur2, up]
// 	OutputPort< vector< double > > portControls;
// 	vector< double > controls;
	
// 	// Controls for measurement by the MHE
// 	OutputPort< vector< double > > portControlsForMeasurement;
// 	vector< double > controlsForMeasurement;

// 	/// Control rates
// 	// Signals: [dur1, dur2, dur3]
// 	OutputPort< vector< double > > portControlRates;
// 	vector< double > controlRates;

// 	/// KKT tolerance
// 	OutputPort< double > portKKTTolerance;
// 	double kktTolerance;

// 	/// Objective value
// 	OutputPort< double > portObjectiveValue;
// 	double objectiveValue;

// 	/// Number of active set changes, returned by QP solver
// 	OutputPort< int > portNumOfActiveSetChanges;
// 	int numOfActiveSetChanges;

// 	/// Execution times
// 	OutputPort< double > portPreparationPhaseExecTime;
// 	OutputPort< double > portFeedbackPhaseExecTime;
// 	OutputPort< double > portExecutionTime;
// 	RTT::os::TimeService::ticks tickPreparationPhaseBegin;
// 	RTT::os::TimeService::ticks tickFeedbackPhaseBegin;
// 	RTT::os::TimeService::ticks tickMPCBegin;
// 	double timePrepPhase;
// 	double timeFdbPhase;
// 	double timeMPC;

// 	/// Status of the QP solver
// 	OutputPort< int > portQPSolverStatus;
// 	/// Status of the QP solver
// 	int qpSolverStatus;

// 	OutputPort< bool > portDataSizeValid;
// 	/// Data sizes are valid
// 	bool dataSizeValid;

// 	/// Lagrange multipliers
// 	OutputPort< vector< double > > portMultipliers;
// 	vector< double > multipliers;
// 	//
// 	// Properties
// 	//

// 	/// Number of SQP iterations
// 	unsigned numSQPIterations;
// 	unsigned sqpIterationsCounter;

// 	// File names for default references and weighting matrices
// 	string refDefaultFileName;
// 	string referencesFileName;
// 	string fileNameWeightsQ;
// 	string fileNameWeightsR;
// 	string fileNameWeightsQF;

// 	//
// 	// TODO Logging
// 	//

// 	/// Our logging category
// //	OCL::logging::Category* logger;

// 	//
// 	// Deep debug stuff
// 	//

// 	OutputPort< vector< double > > portFullStateVector;
// 	vector< double > fullStateVector;

// 	OutputPort< vector< double > > portFullControlVector;
// 	vector< double > fullControlVector;

};

#endif // DYNAMIC_MPC_HPP
