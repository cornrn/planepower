var ConnPolicy cp

#Voltage controller
import("soem_master")
import("soem_ebox")
import("voltageController")
 
#Create components
loadComponent("soemMaster","soem_master::SoemMasterComponent")
loadComponent("voltageController","OCL::VoltageController")
 
#Load properties
soemMaster.ifname = "eth1"
 
#Set activities
setActivity("soemMaster",0.01,HighestPriority,ORO_SCHED_RT)
setActivity("voltageController",0.01,HighestPriority,ORO_SCHED_RT)

#Connect peers
connectPeers("voltageController","soemMaster")
 
soemMaster.configure()
soemMaster.start() 
voltageController.configure()
voltageController.start()


#CameraTrigger
import("cameraTrigger")
 
#Create components
loadComponent("cameraTrigger","OCL::CameraTrigger")
 
#Load properties
#loadService("cameraTrigger","marshalling")
#cameraTrigger.marshalling.loadProperties("../../../properties/cameraTrigger/cameraTrigger.cpf")
 
#Set activities
setActivity("cameraTrigger",0,HighestPriority,ORO_SCHED_RT)

connectPeers("cameraTrigger","soemMaster")

 
cameraTrigger.configure()
cameraTrigger.start()


#MasterTimer
import("masterTimer")
loadComponent("masterTimer","OCL::MasterTimer")
loadService("masterTimer","marshalling")
masterTimer.marshalling.loadProperties("../../../properties/masterTimer.cpf")
var double base_hz = masterTimer.imu_target_hz;
setActivity("masterTimer",1.0/base_hz,HighestPriority,ORO_SCHED_RT)
connect("cameraTrigger.Trigger","masterTimer.cameraClock",cp)
masterTimer.configure()
masterTimer.start()

#LEDTracker
import("LEDTracker")
loadComponent("LEDTracker","OCL::LEDTracker")
LEDTracker.useExternalTrigger=true;
# LEDTracker hangs until frame arrival, does processing, and re-triggers itself.
setActivity("LEDTracker",0,HighestPriority,ORO_SCHED_RT)

#connect("masterTimer.cameraClock","LEDTracker.triggerTimeStampIn",cp)
LEDTracker.configure()
LEDTracker.start()


#PoseFromMarkers
import("poseFromMarkers")
loadComponent("poseFromMarkers","OCL::PoseFromMarkers")
setActivity("poseFromMarkers",0,HighestPriority,ORO_SCHED_RT)
connect("LEDTracker.markerPositions","poseFromMarkers.markerPositions",cp)
poseFromMarkers.configure()
poseFromMarkers.start()

loadComponent("reporter","OCL::FileReporting")
setActivity("reporter",0.0,HighestPriority,ORO_SCHED_RT)

connectPeers("reporter","poseFromMarkers")

reporter.reportPort("poseFromMarkers","pose")
 
#(optionally, overwrite the default report file name)
reporter.ReportFile = "data.dat"
reporter.NullSample = "nan" 
 
reporter.configure()
#reporter.start()
