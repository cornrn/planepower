/// Base class
#include "TelemetryBase.hpp"
/// Custom data type used by OROCOS
#include "types/DynamicMheDataType.hpp"
/// Protobuf header, autogenerated
#include "autogenerated/DynamicMheTelemetry.pb.h"
/// ACADO generated file
#include "autogenerated/acado_common.h"

using namespace DynamicMheProto;

class DynamicMheTelemetry
	: public TelemetryBase<DynamicMheHorizon, DynamicMheProto::DynamicMheMsg>
{
	typedef TelemetryBase<DynamicMheHorizon, DynamicMheProto::DynamicMheMsg> Base;

public:
	DynamicMheTelemetry(std::string name)
		: Base( name )
	{
		for (unsigned el = 0; el < ACADO_NX; ++el)
		{
			msg.add_x();
			Horizon* tmp = msg.mutable_x( el );
			for (unsigned h = 0; h < (ACADO_N + 1); ++h)
				tmp->add_h();
		}

		for (unsigned el = 0; el < ACADO_NXA; ++el)
		{
			msg.add_z();
			Horizon* tmp = msg.mutable_z( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				tmp->add_h();
		}

		for (unsigned el = 0; el < ACADO_NU; ++el)
		{
			msg.add_u();
			Horizon* tmp = msg.mutable_u( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				tmp->add_h();
		}

		for (unsigned el = 0; el < ACADO_NY; ++el)
		{
			msg.add_y();
			Horizon* tmp = msg.mutable_y( el );
			for (unsigned h = 0; h < ACADO_N; ++h)
				tmp->add_h();
		}

		for (unsigned el = 0; el < ACADO_NYN; ++el)
		{
			msg.add_yN();
		}
	}

	~DynamicMheTelemetry()
	{}

protected:

	virtual void fill();

};

using namespace RTT;

void DynamicMheTelemetry::fill()
{
	unsigned el = 0;

	for (el = 0; el < ACADO_NX; ++el)
	{
		Horizon* hor = msg.mutable_x( el );
		for (unsigned h = 0; h < (ACADO_N + 1); ++h)
			hor->set_h(h, data.x[h * ACADO_NX + el]);
	}

	// for (unsigned cnt = 0; cnt < CAMERA_COUNT; ++cnt)
	// {
	// 	DynamicMheProto::DynamicMheMsg_Frame* frame = msg.mutable_frames( cnt );

	// 	frame->mutable_r()->set_u( data.positions[ el++ ] );
	// 	frame->mutable_r()->set_v( data.positions[ el++ ] );

	// 	frame->mutable_g()->set_u( data.positions[ el++ ] );
	// 	frame->mutable_g()->set_v( data.positions[ el++ ] );

	// 	frame->mutable_b()->set_u( data.positions[ el++ ] );
	// 	frame->mutable_b()->set_v( data.positions[ el++ ] );
	// }

	msg.set_solver_status( data.solver_status );
	msg.set_kkt_value( data.kkt_value );
	msg.set_obj_value( data.obj_value );

	msg.set_exec_fdb( data.exec_fdb );
	msg.set_exec_prep( data.exec_prep );

	msg.set_ts_trigger( (double)((uint64_t)data.ts_trigger - startTime) * 1e-9);
	msg.set_ts_elapsed( data.ts_elapsed );
}

ORO_CREATE_COMPONENT_LIBRARY()
ORO_LIST_COMPONENT_TYPE( DynamicMheTelemetry )
