function sys = Model_integ_ACADO_rotation_lin(t,state,flag,P)Parametersx = state(1);y = state(2);z = state(3);dx = state(4);dy = state(5);dz = state(6);% q0 = state(7);% q1 = state(8);% q2 = state(9);% q3 = state(10);e11 = state(7);e12 = state(8);e13 = state(9);e21 = state(10);e22 = state(11);e23 = state(12);e31 = state(13);e32 = state(14);e33 = state(15);w1 = state(16);w2 = state(17);w3 = state(18);r = state(19);dr = state(20);delta = state(21);ddelta = state(22);%  u = linint(P.tu,t);u = P.tu;dddelta = u(1); %carousel accelerationddr = u(2);     %cable accelerationu1 = u(3); %aileronsu2 = u(4); %elevetor% AZ = P.AZ;% EL = P.EL;% CROSS AREA OF THE CABLE :% ---------------------------------------------------------------   AQ      =  pi*dc*dc/4.0                                       ;% THE EFECTIVE MASS' :% ---------------------------------------------------------------   mc      =  rhoc*AQ*r  ;   % mass of the cable   m       =  mk + mc/3.0;   % effective inertial mass   mgrav   =  mk + mc/2.0;   % effective inertial mass% -----------------------------   % ----------------------------%   dm      =  (rhoc*AQ/ 3.0)*dr;   % time derivative of the mass    e1 = [e11,e12,e13];    e2 = [e21,e22,e23];    e3 = [e31,e32,e33];    R = [e1;e2;e3];% WIND SHEAR MODEL :% ---------------------------------------------------------------                                         w       =  0                        ;% EFFECTIVE WIND IN THE KITE`S SYSTEM :% ---------------------------------------------------------------   we(1)   = -w + dx;   we(2)   = dy;   we(3)   = dz;   VKite2 = (we(1)*we(1) + we(2)*we(2) + we(3)*we(3));    VKite = sqrt(VKite2); % CALCULATION OF THE FORCES :% ---------------------------------------------------------------% er    er(1) = x/r;	er(2) = y/r;	er(3) = z/r;%Velocity accross X (cable drag)	wp = er(1)*we(1) + er(2)*we(2) + er(3)*we(3);	wep(1) = we(1) - wp*er(1);	wep(2) = we(2) - wp*er(2);	wep(3) = we(3) - wp*er(3);%Aero coeff.	    % LIFT DIRECTION VECTOR    % -------------------------        %Relative wind speed in Airfoil's referential 'E'    wE = (R.'*we.');%     wE(1) = (q0*q0 + q1*q1 - q2*q2 - q3*q3)*we(1)  +          (2*q0*q3 + 2*q1*q2)*we(2)  +          (2*q1*q3 - 2*q0*q2)*we(3);%     wE(2) =         (2*q1*q2 - 2*q0*q3)*we(1)  +  (q0*q0 - q1*q1 + q2*q2 - q3*q3)*we(2)  +          (2*q0*q1 + 2*q2*q3)*we(3);%     wE(3) =         (2*q0*q2 + 2*q1*q3)*we(1)  +          (2*q2*q3 - 2*q0*q1)*we(2)  +  (q0*q0 - q1*q1 - q2*q2 + q3*q3)*we(3);                %Airfoil's transversal axis in fixed referential 'e'    eTe = R(:,2);%     eTe(1) =              2*q1*q2 - 2*q0*q3;        %     eTe(2) =      q0*q0 - q1*q1 + q2*q2 - q3*q3;%     eTe(3) =              2*q0*q1 + 2*q2*q3;              % Lift axis ** Normed to we !! **    eLe(1) = - eTe(2)*we(3) + eTe(3)*we(2);	eLe(2) = - eTe(3)*we(1) + eTe(1)*we(3);	eLe(3) = - eTe(1)*we(2) + eTe(2)*we(1);%     keyboard    % AERODYNAMIC COEEFICIENTS    % ----------------------------------    VT = cross([w1;w2;w3],[-LT;0;0]) + wE;        alpha = -wE(3)/wE(1);        %NOTE: beta & alphaTail are compensated for the tail motion induced by    %omega !!    beta = VT(2)/sqrt(VT(1)*VT(1) + VT(3)*VT(3));    alphaTail = -VT(3)/VT(1);      	CL = CLA*alpha + CLe*u2     + CLr*u1 + CL0;    CD = CDA*alpha + CDA2*alpha*alpha + CDB2*beta*beta + CDe*u2 + CDr*u1 + CD0;    CR = -RD*w1 + CRB*beta + CRAB*alphaTail*beta + CRr*u1;    CP = CPA*alphaTail + CPe*u2 + CPr*u1 + CP0;    CY = CYB*beta + CYAB*alphaTail*beta;	Cf = rho*dc*r*VKite/8.0;    	% THE FRICTION OF THE CABLE :	% ---------------------------------------------------------------	Ff(1) = -rho*dc*r*VKite*cc*wep(1)/8.0;	Ff(2) = -rho*dc*r*VKite*cc*wep(2)/8.0;	Ff(3) = -rho*dc*r*VKite*cc*wep(3)/8.0;	% LIFT :	% ---------------------------------------------------------------	FL(1) =  rho*CL*eLe(1)*VKite/2.0;    FL(2) =  rho*CL*eLe(2)*VKite/2.0;    FL(3) =  rho*CL*eLe(3)*VKite/2.0;	% DRAG :	% ---------------------------------------------------------------	FD(1) = -rho*VKite*CD*we(1)/2.0;    FD(2) = -rho*VKite*CD*we(2)/2.0;     FD(3) = -rho*VKite*CD*we(3)/2.0; % FORCES (AERO)% ---------------------------------------------------------------   F(1) = FL(1) + FD(1) + Ff(1);   F(2) = FL(2) + FD(2) + Ff(2);   F(3) = FL(3) + FD(3) + Ff(3);% TORQUES (AERO)% ---------------------------------------------------------------     T(1) =  0.5*rho*VKite2*SPAN*CR;   T(2) =  0.5*rho*VKite2*CHORD*CP;   T(3) =  0.5*rho*VKite2*SPAN*CY;      % ATTITUDE DYNAMICS% -----------------------------------------------------------     W = [[0,-w3,w2];[w3,0,-w1];[-w2,w1,0]];        P = 10*R*(inv(R.'*R) - eye(3));    dR = (R*W) + P;%dq = G'*w/2% dq0 = (-q1*w1 - q2*w2 - q3*w3)/2;% dq1 = ( q0*w1 - q3*w2 + q2*w3)/2;% dq2 = ( q3*w1 + q0*w2 - q1*w3)/2;% dq3 = (-q2*w1 + q1*w2 + q0*w3)/2;%MATLABExpressionsF1 = F(1);F2 = F(2);F3 = F(3);T1 = T(1);T2 = T(2);T3 = T(3);MATLABExpressions_rotation% ddXAcado = ddX;% lambdaAcado = lambda;% ODEFile% ddX-ddXAcado% lambda - lambdaAcado%t% ddx = ddX(1);ddy = ddX(2);ddz = ddX(3);% dw1 = ddX(4);dw2 = ddX(5);dw3 = ddX(6);switch flag	case ''	% System equation               sys =   [dx;dy;dz;ddX(1:3); dR(1,:).'; dR(2,:).'; dR(3,:).' ;ddX(4:6);dr;ddr;ddelta;dddelta];        %sys =   [dx;dy;dz;ddx;ddy;ddz;dq0;dq1;dq2;dq3;dw1;dw2;dw3;dr;ddr;ddelta;dddelta;dCost];                case 'meas'                          %Quaternion matrices%         E = [-q1  q0 -q3  q2;%             -q2  q3  q0 -q1;%                -q3 -q2  q1  q0];% %         G = [-q1  q0  q3 -q2;%              -q2 -q3  q0  q1;%               -q3  q2 -q1  q0];%  %  %  %             R = E*G';            ddXE = R'*(ddX(1:3)+[0;0;g]);            sys = [ddxIMU;ddyIMU;ddzIMU;w1IMU;w2IMU;w3IMU;ddXE]';    	case 'output'                  sys = [FL+FD T ]';        case 'input'                      sys = u;                case 'const'              sys = [Const;dConst;lambda;CL];            otherwise		error(['Unknown flag ''' flag '''.']);	end	