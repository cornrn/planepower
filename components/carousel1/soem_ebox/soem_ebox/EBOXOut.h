/* Auto-generated by genmsg_cpp for file /home/kurt/planepower/components/lowlevel/soem/soem_ebox/msg/EBOXOut.msg */
#ifndef SOEM_EBOX_MESSAGE_EBOXOUT_H
#define SOEM_EBOX_MESSAGE_EBOXOUT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
//#include "ros/serialization.h"
//#include "ros/builtin_message_traits.h"
//#include "ros/message_operations.h"
//#include "ros/time.h"

//#include "ros/macros.h"

//#include "ros/assert.h"


namespace soem_ebox
{
template <class ContainerAllocator>
struct EBOXOut_ {
  typedef EBOXOut_<ContainerAllocator> Type;

  EBOXOut_()
  : trigger()
  , digital()
  , analog()
  , timestamp(0)
  , encoder()
  {
    trigger.assign(false);
    digital.assign(false);
    analog.assign(0.0);
    encoder.assign(0);
  }

  EBOXOut_(const ContainerAllocator& _alloc)
  : trigger()
  , digital()
  , analog()
  , timestamp(0)
  , encoder()
  {
    trigger.assign(false);
    digital.assign(false);
    analog.assign(0.0);
    encoder.assign(0);
  }

  typedef boost::array<uint8_t, 2>  _trigger_type;
  boost::array<uint8_t, 2>  trigger;

  typedef boost::array<uint8_t, 8>  _digital_type;
  boost::array<uint8_t, 8>  digital;

  typedef boost::array<float, 2>  _analog_type;
  boost::array<float, 2>  analog;

  typedef uint32_t _timestamp_type;
  uint32_t timestamp;

  typedef boost::array<int32_t, 2>  _encoder_type;
  boost::array<int32_t, 2>  encoder;


  typedef boost::shared_ptr< ::soem_ebox::EBOXOut_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::soem_ebox::EBOXOut_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EBOXOut
typedef  ::soem_ebox::EBOXOut_<std::allocator<void> > EBOXOut;

typedef boost::shared_ptr< ::soem_ebox::EBOXOut> EBOXOutPtr;
typedef boost::shared_ptr< ::soem_ebox::EBOXOut const> EBOXOutConstPtr;

} // namespace soem_ebox

#endif // SOEM_EBOX_MESSAGE_EBOXOUT_H

