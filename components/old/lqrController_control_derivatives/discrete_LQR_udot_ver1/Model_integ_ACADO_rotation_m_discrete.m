function sys = Model_integ_ACADO_rotation_m_discrete(t,state,flag,P)Parametersx = state(1);y = state(2);z = state(3);dx = state(4);dy = state(5);dz = state(6);% q0 = state(7);% q1 = state(8);% q2 = state(9);% q3 = state(10);e11 = state(7);e12 = state(8);e13 = state(9);e21 = state(10);e22 = state(11);e23 = state(12);e31 = state(13);e32 = state(14);e33 = state(15);w1 = state(16);w2 = state(17);w3 = state(18);r = state(19);dr = state(20);delta = state(21);ddelta = state(22);% xr = P.xr;% u0 = P.u;% K = P.K;%  [state xr']% X0 = rotation_carousel(state);%  [X0 xr']% X0 = (state);% xr(4) = 0;xr(5) = 0;X0(21) = 0;% dX0 = X0-xr';% u = -K*(dX0)+u0';%  u = u0';%  u = linint(P.tu,t);% P.K = K;% P.xr = x;% P.u  = u;% P.Tf  = 10;% % X0 = x;u = P.u;dddelta = u(2); %carousel accelerationddr = u(1);     %cable accelerationu1 = u(3); %aileronsu2 = u(4); %elevetorur = u1;up = u2;% AZ = P.AZ;% EL = P.EL;% CROSS AREA OF THE CABLE :% ---------------------------------------------------------------   AQ      =  pi*dc*dc/4.0                                       ;% THE EFECTIVE MASS' :% ---------------------------------------------------------------   mc      =  rhoc*AQ*r  ;   % mass of the cable   m       =  mk + mc/3.0;   % effective inertial mass   mgrav   =  mk + mc/2.0;   % effective inertial mass% -----------------------------   % ----------------------------%   dm      =  (rhoc*AQ/ 3.0)*dr;   % time derivative of the mass    e1 = [e11,e12,e13];    e2 = [e21,e22,e23];    e3 = [e31,e32,e33];    R = [e1;e2;e3];% WIND SHEAR MODEL :% ---------------------------------------------------------------                                         w       =0                ;% EFFECTIVE WIND IN THE KITE`S SYSTEM :% ---------------------------------------------------------------   we(1)   = -w + dx;   we(2)   = dy;   we(3)   = dz;   VKite2 = (we(1)*we(1) + we(2)*we(2) + we(3)*we(3));    VKite = sqrt(VKite2); % CALCULATION OF THE FORCES :% ---------------------------------------------------------------% er    er(1) = x/r;	er(2) = y/r;	er(3) = z/r;%Velocity accross X (cable drag)	wp = er(1)*we(1) + er(2)*we(2) + er(3)*we(3);	wep(1) = we(1) - wp*er(1);	wep(2) = we(2) - wp*er(2);	wep(3) = we(3) - wp*er(3);%Aero coeff.	    % LIFT DIRECTION VECTOR    % -------------------------        %Relative wind speed in Airfoil's referential 'E'    wE = (R.'*we.');%     wE(1) = (q0*q0 + q1*q1 - q2*q2 - q3*q3)*we(1)  +          (2*q0*q3 + 2*q1*q2)*we(2)  +          (2*q1*q3 - 2*q0*q2)*we(3);%     wE(2) =         (2*q1*q2 - 2*q0*q3)*we(1)  +  (q0*q0 - q1*q1 + q2*q2 - q3*q3)*we(2)  +          (2*q0*q1 + 2*q2*q3)*we(3);%     wE(3) =         (2*q0*q2 + 2*q1*q3)*we(1)  +          (2*q2*q3 - 2*q0*q1)*we(2)  +  (q0*q0 - q1*q1 - q2*q2 + q3*q3)*we(3);                %Airfoil's transversal axis in fixed referential 'e'    eTe = R(:,2);%     eTe(1) =              2*q1*q2 - 2*q0*q3;        %     eTe(2) =      q0*q0 - q1*q1 + q2*q2 - q3*q3;%     eTe(3) =              2*q0*q1 + 2*q2*q3;              % Lift axis ** Normed to we !! **    eLe(1) = - eTe(2)*we(3) + eTe(3)*we(2);	eLe(2) = - eTe(3)*we(1) + eTe(1)*we(3);	eLe(3) = - eTe(1)*we(2) + eTe(2)*we(1);%     keyboard    % AERODYNAMIC COEEFICIENTS    % ----------------------------------    VT = cross([w1;w2;w3],[-LT;0;0]) + wE;        alpha = -wE(3)/wE(1);        %NOTE: beta & alphaTail are compensated for the tail motion induced by    %omega !!    beta = VT(2)/sqrt(VT(1)*VT(1) + VT(3)*VT(3));    alphaTail = -VT(3)/VT(1);      	CL = CLA*alpha + CLe*u2     + CLr*u1 + CL0;    CD = CDA*alpha + CDA2*alpha*alpha + CDB2*beta*beta + CDe*u2 + CDr*u1 + CD0;    CR = -RD*w1 + CRB*beta + CRAB*alphaTail*beta + CRr*u1;    CP = CPA*alphaTail + CPe*u2 + CPr*u1 + CP0;    CY = CYB*beta + CYAB*alphaTail*beta;	Cf = rho*dc*r*VKite/8.0;    	% THE FRICTION OF THE CABLE :	% ---------------------------------------------------------------	Ff(1) = -rho*dc*r*VKite*cc*wep(1)/8.0;	Ff(2) = -rho*dc*r*VKite*cc*wep(2)/8.0;	Ff(3) = -rho*dc*r*VKite*cc*wep(3)/8.0;	% LIFT :	% ---------------------------------------------------------------	FL(1) =  rho*CL*eLe(1)*VKite/2.0;    FL(2) =  rho*CL*eLe(2)*VKite/2.0;    FL(3) =  rho*CL*eLe(3)*VKite/2.0;	% DRAG :	% ---------------------------------------------------------------	FD(1) = -rho*VKite*CD*we(1)/2.0;    FD(2) = -rho*VKite*CD*we(2)/2.0;     FD(3) = -rho*VKite*CD*we(3)/2.0; % FORCES (AERO)% ---------------------------------------------------------------   F(1) = FL(1) + FD(1) + Ff(1);   F(2) = FL(2) + FD(2) + Ff(2);   F(3) = FL(3) + FD(3) + Ff(3);% TORQUES (AERO)% ---------------------------------------------------------------     T(1) =  0.5*rho*VKite2*SPAN*CR;   T(2) =  0.5*rho*VKite2*CHORD*CP;   T(3) =  0.5*rho*VKite2*SPAN*CY;      % ATTITUDE DYNAMICS% -----------------------------------------------------------     W = [[0,-w3,w2];[w3,0,-w1];[-w2,w1,0]];        RP = 1/2*R*(inv(R.'*R) - eye(3));    dR = (R*W) + RP;%dq = G'*w/2% dq0 = (-q1*w1 - q2*w2 - q3*w3)/2;% dq1 = ( q0*w1 - q3*w2 + q2*w3)/2;% dq2 = ( q3*w1 + q0*w2 - q1*w3)/2;% dq3 = (-q2*w1 + q1*w2 + q0*w3)/2;%MATLABExpressionsF1 = F(1);F2 = F(2);F3 = F(3);T1 = T(1);T2 = T(2);T3 = T(3);MATLABExpressions_rotation% ddXAcado = ddX;% lambdaAcado = lambda;% ODEFile% ddX-ddXAcado% lambda - lambdaAcado%t% ddx = ddX(1);ddy = ddX(2);ddz = ddX(3);% dw1 = ddX(4);dw2 = ddX(5);dw3 = ddX(6);% 	% DEFINITION OF PI :% 	% ------------------------% 	% 	PI = 3.1415926535897932;% 	% 	% 	%TAIL LENGTH% 	LT = 0.45;% 	% 	%ROLL DAMPING% 	RDfac = 1;% 	RD0 = 1e-2; % 	RD = RDfac*RD0;    % 	% % CONSTANTS :% % ------------------------% 	% 	%  PARAMETERS OF THE KITE :% 	%  -----------------------------% 	mk =  0.463;      %  mass of the kite               %  [ kg    ]% 	% 	% 	%   PHYSICAL CONSTANTS :% 	%  -----------------------------% 	g =    9.81;      %  gravitational constant         %  [ m /s^2]% 	rho =    1.23;      %  density of the air             %  [ kg/m^3]% 	% 	%  PARAMETERS OF THE CABLE :% 	%  -----------------------------% 	rhoc = 1450.00;      %  density of the cable           %  [ kg/m^3]% 	cc =   1.00;      %  frictional constant            %  [       ]% 	dc = 1e-3;      %  diameter                       %  [ m     ]% 	% 	AQ      =  PI*dc*dc/4.0;% 	% 	%CAROUSEL ARM LENGTH% 	rA = 1.085; %(dixit Kurt)% 	% 	% 	%INERTIA MATRIX (Kurt's direct measurements)% 	% Note: low sensitivity to I1,2,3... high sensitivity to I31...% 	I1 =  0.0163;% 	I31 = 0.0006;% 	I2 =  0.0078;% 	I3 =  0.0229;% 	% 	% 	%WIND-TUNNEL PARAMETERS% 					 % 	%Lift (report p. 67)% 	%Sensitivity to CLA error low% 	CLA = 5.064;% 	%Sensitivity to CLe error low% 	CLe = 0.318;% 	%Sensitivity to CLr error low% 	CLr = 0.85; %?!?!?!?!?% 	%HIGH sensitivity to CL0 !!% 	CL0 = 0.239;% 					 % 	%Drag (report p. 70)% 	%Sensitivity to CDA error low% 	CDA = -0.195;% 	CDA2 = 4.268;% 	CDB2 = 0;% 	%Sensitivity to CDe error low% 	CDe = 0.044;% 	%Sensitivity to CDr error low% 	CDr = 0.111;% 	%Sensitivity to CD0 error low% 	CD0 = 0.026;% 					 % 	%Roll (report p. 72)% 	%HIGH sensitivity to CRB !!% 	CRB = -0.062;% 	%HIGH sensitivity to CRAB !!% 	CRAB = -0.271;% 	%Sensitivity to CRr error low% 	CRr = -0.244;% 					 % 	%Pitch (report p. 74)% 	%HIGH sensitivity to CPA !!% 	CPA = 0.293;% 	%Sensitivity to CPe error low% 	CPe = -0.821;% 	%Sensitivity to CPr error low% 	CPr = -0.647; %?!?!?!?!?% 	%HIGH sensitivity to CP0 !!% 	CP0 = 0.03;% 					 % 	%Yaw (report p. 76)% 	%HIGH sensitivity to CYB !!% 	CYB = 0.05;% 	%HIGH sensitivity to CYAB !!% 	CYAB = 0.229;% 					 % 	SPAN = 0.96;% 	CHORD = 0.1;% 		% 	% 	% %                        MODEL EQUATIONS :% % ===============================================================% % 	% CROSS AREA OF THE CABLE :% 	% ---------------------------------------------------------------% 	% % 	AQ      =  PI*dc*dc/4.0                                       ;% 	% 	% THE EFECTIVE MASS' :% 	% ---------------------------------------------------------------% 	% 	mc      =  rhoc*AQ*r  ;   % mass of the cable% 	m       =  mk + mc/3.0;   % effective inertial mass% 	mgrav   =  mk + mc/2.0;   % effective inertial mass% 	% 	% -----------------------------   % ----------------------------% 	%   dm      =  (rhoc*AQ/ 3.0)*dr;   % time derivative of the mass% 	% 	% 	% WIND SHEAR MODEL :% 	% ---------------------------------------------------------------% 	% 	wind       =  0.0;% 	% 	% 	% EFFECTIVE WIND IN THE KITE`S SYSTEM :% 	% ---------------------------------------------------------------% 	% 	we(1)   = -wind + dx;% 	we(2)   =		  dy;% 	we(3)   =		  dz;% 	% 	VKite2 = (we(1)*we(1) + we(2)*we(2) + we(3)*we(3)); % 	VKite = sqrt(VKite2); % 	% 	% CALCULATION OF THE FORCES :% 	% ---------------------------------------------------------------% 	% 	% er%     er(1) = x/r;% 	er(2) = y/r;% 	er(3) = z/r;% 	% 	%Velocity accross X (cable drag)% 	wp = er(1)*we(1) + er(2)*we(2) + er(3)*we(3);% 	wep(1) = we(1) - wp*er(1);% 	wep(2) = we(2) - wp*er(2);% 	wep(3) = we(3) - wp*er(3);% 	% 	%Aero coeff.% 	% 	% 	% LIFT DIRECTION VECTOR% 	% -------------------------% % 	%Relative wind speed in Airfoil's referential 'E'% 	wE(1) = e11*we(1)  + e21*we(2)  + e31*we(3);% 	wE(2) = e12*we(1)  + e22*we(2)  + e32*we(3);% 	wE(3) = e13*we(1)  + e23*we(2)  + e33*we(3);% % % 	%Airfoil's transversal axis in fixed referential 'e'% 	eTe(1) = e12;% 	eTe(2) = e22;% 	eTe(3) = e32;% % % 	% Lift axis ** Normed to we !! **% 	eLe(1) = - eTe(2)*we(3) + eTe(3)*we(2);% 	eLe(2) = - eTe(3)*we(1) + eTe(1)*we(3);% 	eLe(3) = - eTe(1)*we(2) + eTe(2)*we(1);% % 	% AERODYNAMIC COEEFICIENTS% 	% ----------------------------------% 	%VT = cross([w1;w2;w3],[-LT;0;0]) + wE;% % 	VT(1) =          wE(1);% 	VT(2) = -LT*w3 + wE(2);% 	VT(3) =  LT*w2 + wE(3);% % 	alpha = -wE(3)/wE(1);% % 	%Note: beta & alphaTail are compensated for the tail motion induced by omega% 	beta = VT(2)/sqrt(VT(1)*VT(1) + VT(3)*VT(3));% 	alphaTail = -VT(3)/VT(1);% % 	CL = CLA*alpha + CLe*up     + CLr*ur + CL0;% 	CD = CDA*alpha + CDA2*alpha*alpha + CDB2*beta*beta + CDe*up + CDr*ur + CD0;% 	CR = -RD*w1 + CRB*beta + CRAB*alphaTail*beta + CRr*ur;% 	CP = CPA*alphaTail + CPe*up + CPr*ur + CP0;% 	CY = CYB*beta + CYAB*alphaTail*beta;% % % 	Cf = rho*dc*r*VKite/8.0;% % 	% THE FRICTION OF THE CABLE :% 	% ---------------------------------------------------------------% % 	Ff(1) = -rho*dc*r*VKite*cc*wep(1)/8.0;% 	Ff(2) = -rho*dc*r*VKite*cc*wep(2)/8.0;% 	Ff(3) = -rho*dc*r*VKite*cc*wep(3)/8.0;% % 	% LIFT :% 	% ---------------------------------------------------------------% % 	FL(1) =  rho*CL*eLe(1)*VKite/2.0;% 	FL(2) =  rho*CL*eLe(2)*VKite/2.0;% 	FL(3) =  rho*CL*eLe(3)*VKite/2.0;% % 	% DRAG :% 	% ---------------------------------------------------------------% % 	FD(1) = -rho*VKite*CD*we(1)/2.0;% 	FD(2) = -rho*VKite*CD*we(2)/2.0; % 	FD(3) = -rho*VKite*CD*we(3)/2.0; % % % 	% FORCES (AERO)% 	% ---------------------------------------------------------------% % 	F(1) = FL(1) + FD(1) + Ff(1);% 	F(2) = FL(2) + FD(2) + Ff(2);% 	F(3) = FL(3) + FD(3) + Ff(3);% % 	% TORQUES (AERO)% 	% ---------------------------------------------------------------% % 	T(1) =  0.5*rho*VKite2*SPAN*CR;% 	T(2) =  0.5*rho*VKite2*CHORD*CP;% 	T(3) =  0.5*rho*VKite2*SPAN*CY;% % % % 	% ATTITUDE DYNAMICS% 	% -----------------------------------------------------------% % 	de11 =  e12*w3 - e13*w2;% 	de12 =  e13*w1 - e11*w3;% 	de13 =  e11*w2 - e12*w1;% 	de21 =  e22*w3 - e23*w2;% 	de22 =  e23*w1 - e21*w3;% 	de23 =  e21*w2 - e22*w1;% 	de31 =  e32*w3 - e33*w2;% 	de32 =  e33*w1 - e31*w3;% 	de33 =  e31*w2 - e32*w1;% % % % 	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % 	%                                                                    % % 	%  AUTO-GENERATED EQUATIONS (S. Gros, HIGHWIND, OPTEC, KU Leuven)    % % 	%                                                                    % % 	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% % 	% 	% Equations read: % 	% IMA = inv(MA) % 	% ddX = IMA*(Bx - CA*lambda) % 	% lambdaNum = CA^T*IMA*Bx - Blambda % 	% lambdaDen = CA^T*IMA*CA % 	% lambda = lambdaNum/lambdaDen % 	% 	% Arm % 	xA = -rA*sin(delta); % 	dxA = -(ddelta*rA*cos(delta)); % 	ddxA = -(dddelta*rA*cos(delta) - ddelta*ddelta*rA*sin(delta)); % 	yA = rA*cos(delta); % 	dyA = -ddelta*rA*sin(delta); % 	ddyA = - rA*cos(delta)*ddelta*ddelta - dddelta*rA*sin(delta); % 	% 	% BUILD DYNAMICS % 	lambdaNum = ddxA*xA - 2*dy*dyA - ddr*r - ddxA*x - 2*dx*dxA - ddyA*y + ddyA*yA - dr*dr + dx*dx + dxA*dxA + dy*dy + dyA*dyA + dz*dz + (F(1)*(x - xA))/m + (F(2)*(y - yA))/m + (z*(F(3) - g*mgrav))/m; % 	% 	lambdaDen = x*x/m + xA*xA/m + y*y/m + yA*yA/m + z*z/m - (2*x*xA)/m - (2*y*yA)/m; % 	% 	lambda = lambdaNum/lambdaDen; % 	% % 	IntermediateState ddX(6,1); % 	ddX(1,1) = (F(1) - lambda*(x - xA))/m; % 	ddX(2,1) = (F(2) - lambda*(y - yA))/m; % 	ddX(3,1) = -(g*mgrav - F(3) + lambda*z)/m; % 	ddX(4,1) = (I31*(T(3) + w2*(I1*w1 + I31*w3) - I2*w1*w2))/(I31*I31 - I1*I3) - (I3*(T(1) - w2*(I31*w1 + I3*w3) + I2*w2*w3))/(I31*I31 - I1*I3); % 	ddX(5,1) = (T(2) + w1*(I31*w1 + I3*w3) - w3*(I1*w1 + I31*w3))/I2; % 	ddX(6,1) = (I31*(T(1) - w2*(I31*w1 + I3*w3) + I2*w2*w3))/(I31*I31 - I1*I3) - (I1*(T(3) + w2*(I1*w1 + I31*w3) - I2*w1*w2))/(I31*I31 - I1*I3); % 	% 	% BUILD CONSTRAINTS % 	Const = - r*r/2 + x*x/2 - x*xA + xA*xA/2 + y*y/2 - y*yA + yA*yA/2 + z*z/2; % 	dConst = dx*x - dr*r - dxA*x - dx*xA + dxA*xA + dy*y - dyA*y - dy*yA + dyA*yA + dz*z; % 	% 	%%%%%%%%%%%%%%/ END OF AUTO-GENERATED CODE %%%%%%%%%%%%%%%%%%%%%%%%%%% 	switch flag	case ''	% System equation               sys =   [dx;dy;dz;ddX(1:3); dR(1,:).'; dR(2,:).'; dR(3,:).' ;ddX(4:6);dr;ddr;ddelta;dddelta];%         sys =   [dx;dy;dz;ddX(1:3); de11; de12; de13; de21; de22; de23; de31; de32; de33;ddX(4:6);dr;ddr;ddelta;dddelta];        %sys =   [dx;dy;dz;ddx;ddy;ddz;dq0;dq1;dq2;dq3;dw1;dw2;dw3;dr;ddr;ddelta;dddelta;dCost];             case 'LQR'	% System equation        deltaFix = P.delta;        ddeltaFix = P.ddelta;         dddeltaFix = P.dddelta;                        X = [x;y;z];        dX = [dx;dy;dz];                       Rd   = [[cos(-deltaFix), sin(-deltaFix),0];[-sin(-deltaFix), cos(-deltaFix), 0];[0,0,1]];        dRd  = [[-sin(-deltaFix), cos(-deltaFix),0];[-cos(-deltaFix), -sin(-deltaFix), 0];[0,0,0]]*ddeltaFix;        ddRd  = [[-sin(-deltaFix), cos(-deltaFix),0];[-cos(-deltaFix), -sin(-deltaFix), 0];[0,0,0]]*dddeltaFix + [[-cos(-deltaFix), -sin(-deltaFix),0];[sin(-deltaFix), -cos(-deltaFix), 0];[0,0,0]]*ddeltaFix*ddeltaFix;                        dXr = dRd*X + Rd*dX;        ddXr = ddRd*X + 2*dRd*dX + Rd*ddX(1:3);        %         de1 = [de11,de12,de13];%         de2 = [de21,de22,de23];%         de3 = [de31,de32,de33];%         dR = [de1;de2;de3];                dRr = dRd*R + Rd*dR;                sys =   [dXr;ddXr; dRr(1,:).'; dRr(2,:).'; dRr(3,:).' ;ddX(4:6);dr;ddr;ddelta;dddelta];             case 'kalman'	% System equation        deltaFix = P.delta;        ddeltaFix = P.ddelta;         dddeltaFix = P.dddelta;        X = [x;y;z];        dX = [dx;dy;dz];               Rd   = [[cos(-deltaFix), sin(-deltaFix),0];[-sin(-deltaFix), cos(-deltaFix), 0];[0,0,1]];        dRd  = [[-sin(-deltaFix), cos(-deltaFix),0];[-cos(-deltaFix), -sin(-deltaFix), 0];[0,0,0]]*ddeltaFix;        ddRd  = [[-sin(-deltaFix), cos(-deltaFix),0];[-cos(-deltaFix), -sin(-deltaFix), 0];[0,0,0]]*dddeltaFix + [[-cos(-deltaFix), -sin(-deltaFix),0];[sin(-deltaFix), -cos(-deltaFix), 0];[0,0,0]]*ddeltaFix*ddeltaFix;                        Xr = Rd*X;        dXr = dRd*X + Rd*dX;        ddXr = ddRd*X + 2*dRd*dX + Rd*ddX(1:3);                        Rr = Rd*R;                sys =   [ddXr; Xr; dXr; Rr(1,:).'; Rr(2,:).'; Rr(3,:).' ; w1; w2; w3; r; dr; delta; ddelta];            case 'meas'                          %Quaternion matrices%         E = [-q1  q0 -q3  q2;%             -q2  q3  q0 -q1;%                -q3 -q2  q1  q0];% %         G = [-q1  q0  q3 -q2;%              -q2 -q3  q0  q1;%               -q3  q2 -q1  q0];%  %  %  %             R = E*G';            ddXE = R'*(ddX(1:3)+[0;0;g]);            sys = [ddxIMU;ddyIMU;ddzIMU;w1IMU;w2IMU;w3IMU;ddXE]';    	case 'output'                  sys = [FL+FD T ]';        case 'input'                      sys = u;                case 'const'              sys = [Const;dConst;lambda;CL];            otherwise		error(['Unknown flag ''' flag '''.']);	end	