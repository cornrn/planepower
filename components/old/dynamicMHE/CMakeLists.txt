################################################################################
#
# CMake script for building the MHE component
# Author: Milan Vukov, milan.vukov@esat.kuleuven.be
#
################################################################################

CMAKE_MINIMUM_REQUIRED( VERSION 2.8 )

#
# CMake module(s) path
#
SET( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR} )

#
# Do setup in case of ros package, If ROS_ROOT is set, it is
# recommended to use RTT/OCL through the ros packages.
#
#
# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#
SET( ROS_ROOT $ENV{ROS_ROOT} )
IF( ROS_ROOT )
	# This guy has to be exactly here to override ROS default compilation rules
	SET( ROS_BUILD_TYPE Release )

	INCLUDE( $ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake )
	rosbuild_init()
	rosbuild_find_ros_package( rtt )
	rosbuild_find_ros_package( ocl )
	SET( RTT_HINTS HINTS ${rtt_PACKAGE_PATH}/install )
	SET( OCL_HINTS HINTS ${ocl_PACKAGE_PATH}/install )
ENDIF()

FIND_PACKAGE( Orocos-RTT REQUIRED HINTS ${rtt_PACKAGE_PATH}/install )
FIND_PACKAGE( ACADO REQUIRED )
FIND_PACKAGE( MHEExport REQUIRED )

#
# Defines the orocos_* cmake macros. See that file for additional
# documentation.
#
INCLUDE( ${OROCOS-RTT_USE_FILE_PATH}/UseOROCOS-RTT.cmake )

#
# Make directories where generated code will be
#
FILE( MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/src/code_export_mhe )
FILE( MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/src/code_export_mhe/qpoases )

#
# A relative path to the MATLAB ACADO folder
#
SET( MATLAB_ACADO_DIR
	${PROJECT_SOURCE_DIR}/../../../matlab_acado_codegen_simulation
)

#
# Adding ACADO code generation specific include directories
#
INCLUDE_DIRECTORIES(
	${ACADO_INCLUDE_DIRS}

	${MHE_EXPORT_INCLUDE_DIRS}

	${MATLAB_ACADO_DIR}

	${PROJECT_SOURCE_DIR}/src/code_export_mhe
	${PROJECT_SOURCE_DIR}/src/code_export_mhe/qpoases
	${ACADO_QPOASES_EMBEDDED_INC_DIRS}
)

#
# Temporary patch for ACADO generated code
#
ADD_DEFINITIONS( -DACADO_CMAKE_BUILD )
#
# Important define for parameters, see MATLAB_ACADO_DIR/model_constants.hpp
#
ADD_DEFINITIONS( -DCODEGEN_FOR_OROCOS=1 )

#
# C compiler, C99 support
#
SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99 -march=core2" )
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=core2" )

###
### Common commands for building c++ executables and libraries
###

#
# Executable for building the autogenerated code
#
ADD_EXECUTABLE( mhe_codegen
	${MATLAB_ACADO_DIR}/MHE.cpp
)
TARGET_LINK_LIBRARIES(
	mhe_codegen
	${ACADO_SHARED_LIBRARIES}
	${MHE_EXPORT_SHARED_LIBRARIES}
)

#
# A list of autogenerated files
#
SET( MHE_GENERATED_FILES
	${PROJECT_SOURCE_DIR}/src/code_export_mhe/acado.h
	${PROJECT_SOURCE_DIR}/src/code_export_mhe/condensing.c
	${PROJECT_SOURCE_DIR}/src/code_export_mhe/gauss_newton_method.c
	${PROJECT_SOURCE_DIR}/src/code_export_mhe/integrator.c
	${PROJECT_SOURCE_DIR}/src/code_export_mhe/qpoases/solver.hpp
	${PROJECT_SOURCE_DIR}/src/code_export_mhe/qpoases/solver.cpp
)

#
# Call script run_mhe_codegen.sh to suck the arguments that are passed
# to the executable above and call it
#
ADD_CUSTOM_COMMAND(
	COMMAND
		sh ${PROJECT_SOURCE_DIR}/run_mhe_codegen.sh
	WORKING_DIRECTORY
		${PROJECT_SOURCE_DIR}/src
	OUTPUT
		${MHE_GENERATED_FILES}
	DEPENDS
		mhe_codegen
)

orocos_component(
	${PROJECT_NAME}

	# Component sources
	src/dynamicMHE.cpp	src/dynamicMHE.hpp
	
	# Generated sources
	${MHE_GENERATED_FILES}

	# qpOASES embedded sources
	${ACADO_QPOASES_EMBEDDED_SOURCES}
)

orocos_generate_package()

#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})
