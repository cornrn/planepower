var ConnPolicy cp

#MasterTimer
import("masterTimer")
loadComponent("masterTimer","OCL::MasterTimer")
loadService("masterTimer","marshalling")
masterTimer.marshalling.loadProperties("../../properties/masterTimer.cpf")
var double base_hz = masterTimer.imu_target_hz;
setActivity("masterTimer",1.0/base_hz,HighestPriority,ORO_SCHED_RT)
masterTimer.configure()
masterTimer.start()


# McuHandler
import("mcuHandler")
loadComponent("mcuHandler","McuHandler")
loadService("mcuHandler","marshalling")
mcuHandler.marshalling.loadProperties("../../properties/tcp.cpf")
setActivity("mcuHandler",0,HighestPriority,ORO_SCHED_RT)
mcuHandler.useExternalTrigger = true
connect("masterTimer.imuClock","mcuHandler.imuTrigger",cp)
mcuHandler.configure()
mcuHandler.start()

# Soem
import("soem_master")
import("soem_ebox")
loadComponent("soemMaster","soem_master::SoemMasterComponent") 
soemMaster.ifname = "eth1"
setActivity("soemMaster",0,HighestPriority,ORO_SCHED_RT)
soemMaster.configure()
soemMaster.start()

# voltage controller
import("voltageController")
loadComponent("voltageController","OCL::VoltageController")
setActivity("voltageController",0.01,HighestPriority,ORO_SCHED_RT)
connectPeers("voltageController","soemMaster")
voltageController.configure()
voltageController.start()

#encoder
import("encoder")
loadComponent("encoder","OCL::Encoder")
encoder.encoderPort = 0;
setActivity("encoder",0.0,HighestPriority,ORO_SCHED_RT)
connectPeers("encoder","soemMaster")
connect("encoder.encoderTimeStampIn","masterTimer.imuClock",cp)
encoder.configure()
encoder.start()

# Camera trigger
import("cameraTrigger")
loadComponent("cameraTrigger","OCL::CameraTrigger")
setActivity("cameraTrigger",0,HighestPriority,ORO_SCHED_RT)
connectPeers("cameraTrigger","soemMaster")
connect("cameraTrigger.Trigger","masterTimer.cameraClock",cp)
cameraTrigger.configure()
cameraTrigger.start()


# LEDTracker
import("LEDTracker")
loadComponent("LEDTracker","OCL::LEDTracker")
LEDTracker.useExternalTrigger=true;
# LEDTracker hangs until frame arrival, does processing, and re-triggers itself.
setActivity("LEDTracker",0.000,HighestPriority,ORO_SCHED_RT)
connect("masterTimer.cameraClock","LEDTracker.triggerTimeStampIn",cp)
LEDTracker.configure()
LEDTracker.start()
#
#LEDTracker.stop()
#LEDTracker.cleanup()

#PoseFromMarkers
import("poseFromMarkers")
loadComponent("poseFromMarkers","OCL::PoseFromMarkers")
setActivity("poseFromMarkers",0,HighestPriority,ORO_SCHED_RT)
connect("LEDTracker.markerPositions","poseFromMarkers.markerPositions",cp)
poseFromMarkers.configure()
poseFromMarkers.start()

#ImuBuffer
import("imuBuffer")
loadComponent("imuBuffer","OCL::ImuBuffer")
setActivity("imuBuffer",0,HighestPriority,ORO_SCHED_RT)
connect("masterTimer.imuCameraRatio","imuBuffer.imuCameraRatio",cp)
connect("imuBuffer.imuData","mcuHandler.imuData",cp)
imuBuffer.configure()
imuBuffer.start()

# MHE
#import("dynamicMHE")
#loadComponent("dynamicMHE","DynamicMHE")
#setActivity("dynamicMHE",0,HighestPriority,ORO_SCHED_RT)
#connect("dynamicMHE.","masterTimer.cameraClock",cp)
#connect("dynamicMHE.portMeasurementsPose","poseFromMarkers.pose_and_cov_rt_inv",cp)
#connect("dynamicMHE.portMeasuremenets","imuBuffer.imuMeanCov",cp)
#connect("dynamicMHE.delta","encoder.delta",cp)
#connect("dynamicMHE.ddelta","encoder.omega",cp)
#connect("dynamicMHE.","",cp)
#dynamicMHE.configure()
#dynamicMHE.start()




loadComponent("reporter","OCL::FileReporting")
setActivity("reporter",0.0,HighestPriority,ORO_SCHED_RT)

connectPeers("reporter","mcuHandler")
connectPeers("reporter","LEDTracker")
connectPeers("reporter","encoder")
connectPeers("reporter","poseFromMarkers")
connectPeers("reporter","imuBuffer")

#reporter.reportPort("poseFromMarkers","pose_and_cov_rt_inv")
reporter.reportPort("mcuHandler","imuTimeStamp")
reporter.reportPort("mcuHandler","imuData")
#reporter.reportPort("LEDTracker","compTime")
reporter.reportPort("LEDTracker","triggerTimeStampOut")
reporter.reportPort("LEDTracker","markerPositions")
reporter.reportPort("encoder","encoderTimeStampOut")
reporter.reportPort("encoder","delta")
reporter.reportPort("encoder","omega")
reporter.reportPort("mcuHandler","controlTimeStamp")
reporter.reportPort("mcuHandler","controlOutputPort")
 
#(optionally, overwrite the default report file name)
reporter.ReportFile = "data1.dat"
reporter.NullSample = "nan" 
 
reporter.configure()
#reporter.start()


