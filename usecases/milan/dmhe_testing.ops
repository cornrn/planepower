// Description: Testing the dynamic MHE
//
// Author:      Milan Vukov, milan.vukov@esat.kuleuven.be
// Date:        August, 2013

////////////////////////////////////////////////////////////////////////////////
//
// Import our own plugins
//
////////////////////////////////////////////////////////////////////////////////
import( "HighwindStuff" )
require( "HighwindServices" )

//import("jitter")

////////////////////////////////////////////////////////////////////////////////
//
// Start with import, config and starting of the SOEM master
//
////////////////////////////////////////////////////////////////////////////////

// Import
import("soem_master")
import("soem_ebox")
loadComponent("soemMaster", "soem_master::SoemMasterComponent")

// Configure
// TODO Move this property to a .cpf file
soemMaster.ifname = "eth2"

// Set activivity
var int soemPrio = 98
setActivityOnCPU("soemMaster", 0.001, soemPrio, ORO_SCHED_RT,2)

soemMaster.configure()
soemMaster.start()

////////////////////////////////////////////////////////////////////////////////
//
// Import and load components
//
////////////////////////////////////////////////////////////////////////////////

// Dot Service
//import("rtt_dot_service")
//loadService("Deployer","dot")

// Master Timer
import("masterTimer")
loadComponent("masterTimer", "MasterTimer")

// MCU Handler & telemetry
import("mcuHandler")
loadComponent("mcuHandler", "McuHandler")
loadComponent("mcuHandlerTelemetry", "McuHandlerTelemetry")
//loadService("mcuHandler", "jitter")

// Voltage controller
import("voltageController")
loadComponent("voltageController", "VoltageController")

// Encoder & telemetry
import("encoder")
loadComponent("encoder", "Encoder")
loadComponent("encoderTelemetry", "EncoderTelemetry")

// Camera trigger
import("cameraTrigger")
loadComponent("cameraTrigger", "CameraTrigger")

// Line Angle Sensor & telemetry
import("lineAngleSensor")
loadComponent("lineAngleSensor", "LineAngleSensor")
loadComponent("lineAngleSensorTelemetry", "LineAngleSensorTelemetry")

// LEDTracker & telemetry
import("LEDTracker")
loadComponent("LEDTracker", "LEDTracker")
loadComponent("ledTrackerTelemetry", "LEDTrackerTelemetry")

// Winch & telemetry
import("winchControl")
loadComponent("winch", "WinchControl")
loadComponent("winchTelemetry", "WinchControlTelemetry")

// Dynamic MHE component
import("DynamicMhe")
loadComponent("mhe", "DynamicMhe")
loadComponent("mheTelemetry", "DynamicMheTelemetry")

// Input signal generator
import("inputSignalGenerator")
loadComponent("inputSignalGenerator", "InputSignalGenerator")

// OCL NETcdf reporter
loadComponent("imuReporter", "OCL::NetcdfReporting")
//loadComponent("imuJitterReporter", "OCL::NetcdfReporting")
loadComponent("cameraReporter", "OCL::NetcdfReporting")
loadComponent("encoderReporter", "OCL::NetcdfReporting")
loadComponent("lineAngleReporter", "OCL::NetcdfReporting")
loadComponent("winchReporter", "OCL::NetcdfReporting")

loadComponent("mheReporter", "OCL::NetcdfReporting")

////////////////////////////////////////////////////////////////////////////////
//
// Configure components' properties
//
////////////////////////////////////////////////////////////////////////////////

// Master timer
loadService("masterTimer", "marshalling")
masterTimer.marshalling.loadProperties("../../properties/masterTimer.cpf")
var double base_hz = masterTimer.imu_target_hz

// MCU
loadService("mcuHandler","marshalling")
mcuHandler.marshalling.loadProperties("../../properties/tcp.cpf")
mcuHandler.Ts = 1.0 / base_hz
mcuHandler.rtMode = true

// Voltage controller

// Encoder
encoder.encoderPort = 0;
// Same as for SOEM
encoder.Ts = 0.001;

// Camera trigger

// LED tracker - hangs until frame arrival, does processing, and re-triggers itself.
LEDTracker.useExternalTrigger = true;
LEDTracker.sigma_marker = 20;

// Winch communication
// TODO All configuration is hard-coded in C++, move some of them to properties

// Dynamic MHE -- everything is hard-coded

//
// Telemetry
//

mcuHandlerTelemetry.port = "tcp://*:5563"
encoderTelemetry.port = "tcp://*:5564"
ledTrackerTelemetry.port = "tcp://*:5565"
lineAngleSensorTelemetry.port = "tcp://*:5566"
winchTelemetry.port = "tcp://*:5567"
mheTelemetry.port = "tcp://*:5570"

// OK, so here we take the current timestamp and set
// it to all telemetry components so that time on the
// live plots begins from approx the start of the
// experiments...
var uint64_t startTime = HighwindServices.getTimestamp()

mcuHandlerTelemetry.startTime = startTime
encoderTelemetry.startTime = startTime
ledTrackerTelemetry.startTime = startTime
lineAngleSensorTelemetry.startTime = startTime
winchTelemetry.startTime = startTime
mheTelemetry.startTime = startTime

//
// Reporters
//

// Set reporter policy: we use circular buffer connection with quite a long 
// buffer
var ConnPolicy rp
// rp.type = DATA
rp.type = CIRCULAR_BUFFER
rp.size = 100
rp.lock_policy = LOCKED
// rp.lock_policy = LOCK_FREE

var ConnPolicy rp_sensors
rp_sensors.type = CIRCULAR_BUFFER
rp_sensors.size = 4000

imuReporter.ReportFile = "imuData.nc"
imuReporter.ReportPolicy = rp_sensors
imuReporter.ReportOnlyNewData = false

// imuJitterReporter.ReportFile = "imuJitterData.nc"
// imuJitterReporter.ReportPolicy = rp_sensors
// imuJitterReporter.ReportOnlyNewData = false

cameraReporter.ReportFile = "cameraData.nc"
cameraReporter.ReportPolicy = rp_sensors
cameraReporter.ReportOnlyNewData = false

encoderReporter.ReportFile = "encoderData.nc"
encoderReporter.ReportPolicy = rp_sensors
encoderReporter.ReportOnlyNewData = false

lineAngleReporter.ReportFile = "angleData.nc"
lineAngleReporter.ReportPolicy = rp_sensors
lineAngleReporter.ReportOnlyNewData = false

winchReporter.ReportFile = "winchData.nc"
winchReporter.ReportPolicy = rp_sensors
winchReporter.ReportOnlyNewData = false

mheReporter.ReportFile = "dynamicMheData.nc"
mheReporter.ReportPolicy = rp
mheReporter.ReportOnlyNewData = false

////////////////////////////////////////////////////////////////////////////////
//
// Set activities and priorities
//
////////////////////////////////////////////////////////////////////////////////

var int masterTimerPrio = 98
var int sensorPrio = 97
var int ocpPrio = 99
var int LEDTrackerPrio = 70
var int winchPrio = 65
var int sineGenPrio = 60
var int telemetryPrio = 50

setActivityOnCPU("masterTimer", 1.0 / base_hz, masterTimerPrio, ORO_SCHED_RT,2)

setActivityOnCPU("mcuHandler", 0.002, sensorPrio, ORO_SCHED_RT,6)
setActivityOnCPU("voltageController", 0.01, sensorPrio, ORO_SCHED_RT,6)
setActivityOnCPU("encoder", 0.0, sensorPrio, ORO_SCHED_RT,6)
setActivityOnCPU("cameraTrigger", 0.0, sensorPrio, ORO_SCHED_RT,6)
setActivityOnCPU("lineAngleSensor", 0.0, sensorPrio, ORO_SCHED_RT,6)
setActivityOnCPU("LEDTracker", 0.0, LEDTrackerPrio, ORO_SCHED_RT,6)
setActivityOnCPU("inputSignalGenerator", 0.01, sineGenPrio, ORO_SCHED_RT,6)
// TODO set period of the winch to the same or <int> * LED tracker period
//      in a conf file
setActivityOnCPU("winch", 1.0 / 50, winchPrio, ORO_SCHED_RT,6)

setActivityOnCPU("mhe", 0.0, ocpPrio, ORO_SCHED_RT,3)

setActivityOnCPU("mcuHandlerTelemetry", 1.0 / 100.0, telemetryPrio, ORO_SCHED_OTHER, 1)
setActivityOnCPU("encoderTelemetry", 1.0 / 100.0, telemetryPrio, ORO_SCHED_OTHER, 1)
setActivityOnCPU("ledTrackerTelemetry", 1.0 / 25.0, telemetryPrio, ORO_SCHED_OTHER, 1)
setActivityOnCPU("lineAngleSensorTelemetry", 1.0 / 100.0, telemetryPrio, ORO_SCHED_OTHER, 1)
setActivityOnCPU("winchTelemetry", 1.0 / 100.0, telemetryPrio, ORO_SCHED_OTHER, 1)
setActivityOnCPU("mheTelemetry", 1.0 / 50.0, telemetryPrio, ORO_SCHED_OTHER, 1)

setActivityOnCPU("imuReporter", 0.0, LowestPriority, ORO_SCHED_OTHER,0)
setActivityOnCPU("cameraReporter", 0.0, LowestPriority, ORO_SCHED_OTHER,0)
setActivityOnCPU("encoderReporter", 0.0, LowestPriority, ORO_SCHED_OTHER,0)
setActivityOnCPU("lineAngleReporter", 0.0, LowestPriority, ORO_SCHED_OTHER,0)
setActivityOnCPU("winchReporter", 0.0, LowestPriority, ORO_SCHED_OTHER,0)
setActivityOnCPU("mheReporter", 0.0, LowestPriority, ORO_SCHED_OTHER,0)

////////////////////////////////////////////////////////////////////////////////
//
// Connect components
//
////////////////////////////////////////////////////////////////////////////////

connectPeers("soemMaster", "encoder")
connectPeers("cameraTrigger", "soemMaster")
connectPeers("soemMaster", "lineAngleSensor")

var ConnPolicy cp

var ConnPolicy cpLT
cpLT.type = 1
cpLT.size = 5

connect("masterTimer.cameraClock", "LEDTracker.triggerTimeStampIn", cpLT)
connect("masterTimer.cameraClock", "cameraTrigger.Trigger", cp)

connect("voltageController.eboxAnalog", "soemMaster.Slave_1001.AnalogIn", cp)
connect("soemMaster.Slave_1001.Measurements", "encoder.eboxOut", cp)
connect("soemMaster.Slave_1001.Measurements", "lineAngleSensor.eboxOut", cp)
connect("voltageController.eboxAnalog", "encoder.eboxAnalog", cp)

connect("inputSignalGenerator.data", "mcuHandler.controls", cp)

// MHE connections

var ConnPolicy cpImuMhe
cpImuMhe.type = 1
cpImuMhe.size = 100

connect("masterTimer.controlsPlaybackClock", "mhe.trigger", cp)
connect("mcuHandler.data", "mhe.mcuData", cpImuMhe)
connect("encoder.data", "mhe.encoderData", cp)
connect("LEDTracker.data", "mhe.ledTrackerData", cp)
connect("lineAngleSensor.data", "mhe.lasData", cpImuMhe)
connect("winch.data", "mhe.winchData", cp)

connect("mcuHandler.data", "mcuHandlerTelemetry.msgData", cp)
connect("encoder.data", "encoderTelemetry.msgData", cp)
connect("LEDTracker.data", "ledTrackerTelemetry.msgData", cp)
connect("lineAngleSensor.data", "lineAngleSensorTelemetry.msgData", cp)
connect("winch.data", "winchTelemetry.msgData", cp)

connect("mhe.debugData", "mheTelemetry.msgData", cp)

////////////////////////////////////////////////////////////////////////////////
//
// Reporter configuration
//
////////////////////////////////////////////////////////////////////////////////

connectPeers("imuReporter", "mcuHandler")
//connectPeers("imuJitterReporter", "mcuHandler")
imuReporter.reportComponent( "mcuHandler" )
//imuJitterReporter.reportPort( "mcuHandler", "jitter.jitter" )

connectPeers("cameraReporter", "LEDTracker")
cameraReporter.reportComponent( "LEDTracker" )

connectPeers("encoderReporter", "encoder")
encoderReporter.reportComponent( "encoder" )

connectPeers("lineAngleReporter", "lineAngleSensor")
lineAngleReporter.reportComponent( "lineAngleSensor" )

connectPeers("winchReporter", "winch")
winchReporter.reportComponent( "winch" )

connectPeers("mheReporter", "mhe")
mheReporter.reportPort("mhe", "debugData")

////////////////////////////////////////////////////////////////////////////////
//
// Define some functions
//
////////////////////////////////////////////////////////////////////////////////

global bool setSpeed(double voltage)
{
	return voltageController.setVoltage(0, voltage)
}

global bool setTetherLength(double length)
{
	return winch.setTetherLength( length )
}

global void abort( void )
{
	mhe.stop()

	setSpeed( 0 )
	setTetherLength( 1.275 ) # This is the current homing tether length
}

////////////////////////////////////////////////////////////////////////////////
//
// Configure and start components
//
////////////////////////////////////////////////////////////////////////////////

// Just configure the master timer component.
// NOTE This must be the first component to be configured
masterTimer.configure()

mcuHandler.configure()
mcuHandler.start()

mcuHandlerTelemetry.configure()
mcuHandlerTelemetry.start()

voltageController.configure()
voltageController.start()

encoder.configure()
encoder.start()

encoderTelemetry.configure()
encoderTelemetry.start()

cameraTrigger.configure()
cameraTrigger.start()

lineAngleSensor.configure()
lineAngleSensor.start()

lineAngleSensorTelemetry.configure()
lineAngleSensorTelemetry.start()

LEDTracker.configure()
LEDTracker.start()

ledTrackerTelemetry.configure()
ledTrackerTelemetry.start()

winch.configure()
winch.start()

winchTelemetry.configure()
winchTelemetry.start()

mhe.configure()
//mhe.start()

mheTelemetry.configure()
mheTelemetry.start()

imuReporter.configure()
imuReporter.start()

//imuJitterReporter.configure()
//imuJitterReporter.start()

cameraReporter.configure()
cameraReporter.start()

encoderReporter.configure()
encoderReporter.start()

lineAngleReporter.configure()
lineAngleReporter.start()

winchReporter.configure()
winchReporter.start()

mheReporter.configure()
mheReporter.start()

inputSignalGenerator.configure()
inputSignalGenerator.start()

// Now, when all other components are started, start the master timer component.
masterTimer.start()
