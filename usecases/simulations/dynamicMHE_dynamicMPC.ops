################################################################################
#
# Import and load components
#
################################################################################

# Master Timer
import("masterTimer")
loadComponent("masterTimer","OCL::MasterTimer")

# Encoder
import("encoderLatch")
loadComponent("EncoderLatch","OCL::EncoderLatch")

# Simulator
import("planeSimulatorRframe")
loadComponent("sim","OCL::planeSimulatorRframe")
setActivity("sim",0,HighestPriority,ORO_SCHED_RT)

# LEDTrackerSimulator
import("LEDTrackerSimulator")
loadComponent("LEDTrackerSimulator","OCL::LEDTrackerSimulator")

# IMU buffer
import("imuBuffer")
loadComponent("imuBuffer","OCL::ImuBuffer")

# cameraSimulator
import("cameraSimulator")
loadComponent("cameraSimulator","OCL::CameraSimulator")

# Pose from markers
import("poseFromMarkers")
loadComponent("poseFromMarkers","OCL::PoseFromMarkers")

# MHE, with dynamic model
import("dynamicMHE")
loadComponent("dynamicMHE","DynamicMHE")

# MPC, with dynamic model
import("dynamicMPC")
loadComponent("dynamicMPC","DynamicMPC")

# Manual controller
#import("manualController")
#loadComponent("manualController","OCL::ManualController")

# OCL reporter
loadComponent("reporter","OCL::FileReporting")

################################################################################
#
# Configure components' properties
#
################################################################################

# Master timer
loadService("masterTimer", "marshalling")
masterTimer.marshalling.loadProperties("../../properties/masterTimer.cpf")
var double base_hz = masterTimer.imu_target_hz

# OCL Reporter (non real-time)
#(optionally, overwrite the default report file name)
reporter.ReportFile = "dynamicMHE_dynamicMPC.dat"
#reporter.NullSample = "nan"

dynamicMPC.propFileNameWeightsQ = "../../properties/mpc_properties/CG_Q.txt"
dynamicMPC.propFileNameWeightsR = "../../properties/mpc_properties/CG_R.txt"
dynamicMPC.propFileNameWeightsQF = "../../properties/mpc_properties/CG_Qf.txt"
dynamicMPC.propRefDefaultFileName = "../../properties/mpc_properties/H2Xref.dat"

# MHE
dynamicMHE.propDragScaling = 0.5
dynamicMHE.propNumSQPIterations = 3

# MPC
dynamicMPC.propNumSQPIterations = 1

################################################################################
#
# Set activities and priorities
#
################################################################################

var int masterTimerPrio = 99
var int sensorPrio = 90
var int ocpPrio = 80
var int LEDTrackerPrio = 70
masterTimerPrio = 99
sensorPrio = 99
ocpPrio = 99
LEDTrackerPrio = 99

setActivity("masterTimer", 1.0 / base_hz, masterTimerPrio, ORO_SCHED_RT)

setActivity("EncoderLatch",0,sensorPrio,ORO_SCHED_RT)

# Simulator property depends on period of master timer..
sim.integrationStep = masterTimer.getPeriod()

setActivity("imuBuffer",0,sensorPrio,ORO_SCHED_RT)

setActivity("sim",0,sensorPrio,ORO_SCHED_RT)

setActivity("cameraSimulator",0,sensorPrio,ORO_SCHED_RT)

setActivity("LEDTrackerSimulator", 0, LEDTrackerPrio, ORO_SCHED_RT)

setActivity("poseFromMarkers", 0, LEDTrackerPrio, ORO_SCHED_RT)

# MHE, with dynamic model
setActivity("dynamicMHE", 0, ocpPrio, ORO_SCHED_RT)

# MPC, with dynamic model
setActivity("dynamicMPC", 0.0, ocpPrio, ORO_SCHED_RT)

#setActivity("manualController",0,11,ORO_SCHED_RT)

setActivity("reporter", 0.0, 10, ORO_SCHED_RT)

################################################################################
#
# Connect components
#
################################################################################

var ConnPolicy cp

connect("masterTimer.imuClock","sim.trigger",cp)
connect("masterTimer.cameraClock","LEDTrackerSimulator.triggerTimeStampIn",cp)

connect("EncoderLatch.triggerTimeStampIn","masterTimer.cameraClock",cp)
connect("EncoderLatch.deltaOmegaIn","sim.deltaOmega",cp)

connect("poseFromMarkers.markerPositions","LEDTrackerSimulator.markerPositions",cp)

connect("sim.triggerTimeStampOut", "cameraSimulator.triggerTimeStampIn",cp)
connect("sim.stateOutputPort","cameraSimulator.stateInputPort",cp)

connect("LEDTrackerSimulator.triggerTimeStampIn","cameraSimulator.triggerTimeStampOut",cp)
connect("LEDTrackerSimulator.markerPositionsIn","cameraSimulator.markerPositions",cp)
connect("LEDTrackerSimulator.markerPositionsAndCovarianceIn","cameraSimulator.markerPositionsAndCovariance",cp)

connect("masterTimer.imuCameraRatio","imuBuffer.imuCameraRatio",cp)
connect("imuBuffer.imuData","sim.imuData",cp)

connect("dynamicMHE.portMeasurementsMarkers",	"LEDTrackerSimulator.markerPositionsAndCovariance",cp)
connect("dynamicMHE.portMeasurementsPose",		"poseFromMarkers.pose",cp)
connect("dynamicMHE.portMeasurementsIMU",		"imuBuffer.imuMeanCov",cp)
connect("dynamicMHE.portMeasurementsEncoder","EncoderLatch.deltaOmega",cp)
connect("dynamicMHE.portMeasurementsCtrl",	"sim.controlOutputPort",cp)

#connect("dynamicMHE.portMeasurementsCtrl","dynamicMPC.portControlsForMHE",cp)
connect("dynamicMHE.portStateEstimate","dynamicMPC.portFeedback",cp)
connect("dynamicMHE.portReady","dynamicMPC.portFeedbackReady",cp)

# FEEDBACK!!!
#connect("dynamicMPC.portControlsForMHE","sim.controlInputPort",cp)

################################################################################
#
# Reporter configuration
#
################################################################################

connectPeers("reporter","LEDTrackerSimulator")
connectPeers("reporter","poseFromMarkers")
connectPeers("reporter","imuBuffer")
connectPeers("reporter","dynamicMHE")
connectPeers("reporter","dynamicMPC")
connectPeers("reporter","sim")

#reporter.reportPort("poseFromMarkers","pose")
#reporter.reportPort("LEDTrackerSimulator","compTime")
#reporter.reportPort("LEDTrackerSimulator","triggerTimeStampOut")
#reporter.reportPort("LEDTrackerSimulator","markerPositionsAndCovariance")
#reporter.reportPort("imuBuffer","imuMeanCov")
#reporter.reportPort("sim","stateOutputPort")

#reporter.reportPort("dynamicMHE","portReady")
#reporter.reportPort("dynamicMHE","portWeightingCoefficients")
#reporter.reportPort("dynamicMHE","portDataSizeValid")
#reporter.reportPort("dynamicMHE","portQPSolverStatus")
#reporter.reportPort("dynamicMHE","portKKTTolerance")
#reporter.reportPort("dynamicMHE","portFullStateVector")
#reporter.reportPort("dynamicMHE","portStateEstimate")
#reporter.reportPort("dynamicMHE","portNumOfActiveSetChanges")
#reporter.reportPort("dynamicMHE","portPreparationPhaseExecTime")
#reporter.reportPort("dynamicMHE","portFeedbackPhaseExecTime")

reporter.reportPort("dynamicMPC","portDataSizeValid")
reporter.reportPort("dynamicMPC","portQPSolverStatus")
reporter.reportPort("dynamicMPC","portControlsForMHE")
#reporter.reportPort("dynamicMPC","portControls")

################################################################################
#
# Aliases
#
################################################################################

#EncoderLatch.deltaOmega.last[1]/2.0/3.14159*60.0

################################################################################
#
# Configure and start components
#
################################################################################

masterTimer.configure()

sim.configure()
sim.start()

cameraSimulator.configure()
cameraSimulator.start()

EncoderLatch.configure()
EncoderLatch.start()

LEDTrackerSimulator.configure()
LEDTrackerSimulator.start()

poseFromMarkers.configure()
poseFromMarkers.start()

imuBuffer.configure()
imuBuffer.start()

dynamicMHE.configure()
#dynamicMHE.start()

dynamicMPC.configure()
#dynamicMPC.start()

#manualController.configure()
#manualController.start()
 
reporter.configure()
reporter.start()

masterTimer.start()

var double velocity = 1.0
