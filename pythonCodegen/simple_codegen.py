#!/usr/bin/env python

import casadi
from casadi import ssym, mul, SXFunction, vertcat

a = ssym('a')
b = ssym('b')
c = ssym('c')
d = ssym('d')
f = (a+b)/c*d
g = f*f*f
h = f*c

i1 = vertcat([a,b])
i2 = vertcat([c,d])
o1 = vertcat([f,c])
o2 = vertcat([g])

F = casadi.SXFunction([i1,i2],[o1,o2])
F.init()
F.generateCode('joel_style.c')

s = F.getDescription().split('\n')[:-1]
for i in xrange(len(s)):
    if s[i][:2]=='@0':
        break
s2 = s[i:]
s3 = '\n\t'.join(s2).replace('@','r')
body = '\t'+s3+'\n'
regcount=F.getWorkSize();
regdeclarations='\tdouble ' + ','.join(['r'+str(n) for n in xrange(regcount)])+';\n';
body=regdeclarations+body;

fname='drew_style'
dir1='__inline__'
instring='double ** input'
outstring='double ** output'
proto='%s void %s(%s, %s)'%(dir1,fname,instring,outstring)
declaration=proto+';\n'
definition=proto + '\n{\n' + body + '}\n'
warnstring='// WARNING!!! THIS CODE WAS AUTOGENERATED; EDIT AT YOUR PERIL!!!'
docstring='// This function gives an idea what Andrew wants casadi code export to look like'
code=warnstring+'\n\n'+docstring+'\n'+definition
print(code)

import os
fd = os.open(fname+'.h',os.O_CREAT|os.O_WRONLY);
os.write(fd,code);
os.close(fd);

