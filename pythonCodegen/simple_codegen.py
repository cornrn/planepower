#!/usr/bin/env python

import casadi
from casadi import ssym, mul, SXFunction, vertcat

def generateSimpleCode(F, 
                       filename='casadi_cogened_function.h',
                       docstring="""// This function was undocumented in the
// call to generateSimpleCode at cogen time""",
                       warnstring="""// WARNING!!! THIS CODE WAS AUTOGENERATED!!! \
 EDIT AT YOUR PERIL!!!""",
                       outputtype='int',
                       forceinline=True):
    fname=filename.split('.')
    assert len(fname)==2
    fname = fname[0]

    if forceinline:
        dir1='inline '
        dir2=' __attribute__((always_inline))'
    else:
        dir1=''
        dir2=''

    # Scrape and clean the body of the C function from the SXFunction's desrciption
    s = F.getDescription().split('\n')[:-1]
    for i in xrange(len(s)):
        if s[i][:2]=='@0':
            break
    s2 = s[i:]
    s3 = '\n\t'.join(s2).replace('@','r')
    body = '\t'+s3+'\n'
    regcount=F.getWorkSize();
    regdeclarations='\tdouble ' + ','.join(['r'+str(n) for n in xrange(regcount)])+';\n';
    body=regdeclarations+body;
    if outputtype=='int':
        body = body + '\treturn(0);\n'

    # Generate the signature for the function
    instring='double ** input'
    outstring='double ** output'
    proto='%s %s(%s, %s)'%(outputtype,fname,instring,outstring)
    declaration = dir1 + proto + dir2 + ';\n'
    definition=proto + '\n{\n' + body + '}\n'
    sq_inline = "inline double sq(double x){return x*x;}\n"
    sign_inline = "inline double sign(double x){ return x<0 ? -1 : x>0 ? 1 : x;}\n"
    code=warnstring+'\n'+sq_inline+sign_inline+'\n'+docstring+'\n'+declaration+definition

    import os
    f = open(filename,'wb');
    f.write(code);
    f.close();

    return code

if __name__=='__main__':

    # A Simple Example Function
    a = ssym('a')
    b = ssym('b')
    c = ssym('c')
    d = ssym('d')
    f = (a+b)/c*d
    g = f*f*f
    h = f*c
    i1 = vertcat([a,b])
    i2 = vertcat([c,d])
    o1 = vertcat([f,c])
    o2 = vertcat([g])
    F = casadi.SXFunction([i1,i2],[o1,o2])
    F.init()

    F.generateCode('joel_style.c')
    code = generateSimpleCode(F,
                              'drew_style.c',
                              docstring='// Example of an exported function')
    #print(code)
    import os
    os.system('gcc -c -Wall -Werror drew_style.c')





